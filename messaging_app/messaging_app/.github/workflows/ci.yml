name: Django CI

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13.5'
  DATABASE_URL: mysql://root:root23@127.0.0.1:3306/test_db

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint with flake8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install flake8 flake8-django flake8-black flake8-isort flake8-bugbear

      - name: Run flake8 linting
        run: |
          echo "Running flake8 lint checks..."
          flake8 messaging_app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 messaging_app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Upload flake8 report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: flake8-lint-report
          path: .

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        django-version: [4.2, 5.2]
        python-version: ['3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install pytest pytest-django pytest-cov coverage mysqlclient

      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ppassword!23 --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Run migrations
        env:
          DJANGO_SETTINGS_MODULE: messaging_app.settings_test
        run: |
          cd messaging_app
          python manage.py makemigrations --check --dry-run
          python manage.py migrate

      - name: Run tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: messaging_app.settings_test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: test_db
          DB_USER: user
          DB_PASSWORD: password!23
        run: |
          cd messaging_app
          coverage run manage.py test
          coverage report
          coverage xml

      - name: Check coverage threshold
        run: |
          echo "Checking if coverage meets minimum threshold..."
          python -m coverage report --fail-under=80

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: messaging_app/coverage.xml

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install code quality tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort bandit safety

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Run security scan with bandit
        run: |
          bandit -r . -f html -o security-bandit-report.html -ll || true

      - name: Check for vulnerable packages with safety
        run: |
          safety check --json --output security-safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            security-bandit-report.html
            security-safety-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, code-quality]
    if: always()

    steps:
      - name: Notify on failure
        if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.code-quality.result == 'failure'
        run: |
          echo " CI Pipeline failed!"
          echo "Lint job: ${{ needs.lint.result }}"
          echo "Test job: ${{ needs.test.result }}"
          echo "Code Quality job: ${{ needs.code-quality.result }}"
          exit 1

      - name: Notify on success
        if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.code-quality.result == 'success'
        run: |
          echo " All CI checks passed!"
          echo "✓ Flake8 linting passed"
          echo "✓ All tests passed with coverage"
          echo "✓ Code quality checks passed"
