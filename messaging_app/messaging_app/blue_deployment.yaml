# ============================================
# Secret: Store MySQL credentials securely
# ============================================
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: messaging_db
  MYSQL_USER: user
  MYSQL_PASSWORD: root

---
# ============================================
# Persistent Volume Claim: MySQL data storage
# ============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# =================
# MySQL Deployment
# =================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:9.4.0
          ports:
            - containerPort: 3306
          envFrom:
            - secretRef:
                name: mysql-secret
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
# ===================================
# MySQL Service (Internal Access Only)
# ===================================
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
  clusterIP: None

---
# =================
# Django Deployment
# =================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django-web
  template:
    metadata:
      labels:
        app: django-web
    spec:
      containers:
        - name: django-web
          image: dokerfixer/django-messaging-app:2.0
          command: ["/bin/sh", "-c"]
          args:
            - sleep 10 &&
              python manage.py migrate &&
              python manage.py collectstatic --noinput --clear &&
              python manage.py runserver 0.0.0.0:8000
          ports:
            - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 5
            failureThreshold: 3
          env:
            - name: MYSQL_HOST
              value: mysql-service
            - name: MYSQL_PORT
              value: "3306"
          envFrom:
            - secretRef:
                name: mysql-secret

---
# ===================================
# Django Service (Internal Access Only)
# ===================================
apiVersion: v1
kind: Service
metadata:
  name: django-service
spec:
  selector:
    app: django-web
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP



